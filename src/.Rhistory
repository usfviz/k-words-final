ordered = TRUE)
ordered = TRUE)
bootcampDataFrame$anticipatedGrade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("Pass", "A+"),
labels = c("medium", "max"),
ordered = TRUE)
max(bootcampDataFrame)
max(bootcampDataFrame$anticipatedGrade)
bootcampDataFrame = data.frame(courseNum, courseName, courseProf,
enrolled, anticipatedGrade, anticipatedHours)
typesTwo <- sapply(bootcampDataFrame, typeof)
classesTwo <- sapply(bootcampDataFrame, class)
typeClassTwo = data.frame(Type = typesTwo, Class = classesTwo)
knitr::kable(typeClassTwo)
max(bootcampDataFrame$anticipatedGrade)
bootcampDataFrame$anticipatedGrade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("Pass", "A+"),
ordered = TRUE)
max(bootcampDataFrame$anticipatedGrade)
bootcampDataFrame = data.frame(courseNum, courseName, courseProf,
enrolled, anticipatedGrade, anticipatedHours)
typesTwo <- sapply(bootcampDataFrame, typeof)
classesTwo <- sapply(bootcampDataFrame, class)
typeClassTwo = data.frame(Type = typesTwo, Class = classesTwo)
knitr::kable(typeClassTwo)
bootcampDataFrame$anticipatedGrade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("Pass", "A+"),
ordered = TRUE)
max(bootcampDataFrame$anticipatedGrade)
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("Pass", "A+"),
ordered = TRUE)
paste(bootcampDataFrame$anticipatedGrade[grade = "A+"], ":")
grade
max(grade)
grade
max(grade)
max(grade, na.rm = TRUE)
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("Fail", "Pass", "A+"),
ordered = TRUE)
paste(bootcampDataFrame$anticipatedGrade[grade = "A+"], ":", )
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("Fail", "Pass", "A+"),
ordered = TRUE)
#paste(bootcampDataFrame$anticipatedGrade[grade = "A+"], ":", )
max(grade, na.rm = TRUE)
grade
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("Fail", "Pass", "A+"),
ordered = TRUE)
max(grade, na.rm = TRUE)
paste(bootcampDataFrame$courseName[grade = "A+], ":", $anticipatedGrade[grade = "A+"])
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("Fail", "Pass", "A+"),
ordered = TRUE)
max(grade, na.rm = TRUE)
paste(bootcampDataFrame$courseName[grade = "A+"], ":", $anticipatedGrade[grade = "A+"])
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("Fail", "Pass", "A+"),
ordered = TRUE)
max(grade, na.rm = TRUE)
paste(bootcampDataFrame$courseName[grade = "A+"], ":", bootcampDataFrame$anticipatedGrade[grade = "A+"])
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("Fail", "Pass", "A+"),
ordered = TRUE)
max(grade, na.rm = TRUE)
paste(bootcampDataFrame$courseName[grade = "A+"], ":", bootcampDataFrame$anticipatedGrade[grade = "A+"])
bootcampDataFrame = data.frame(courseNum, courseName, courseProf,
enrolled, anticipatedGrade, anticipatedHours)
typesTwo <- sapply(bootcampDataFrame, typeof)
classesTwo <- sapply(bootcampDataFrame, class)
typeClassTwo = data.frame(Type = typesTwo, Class = classesTwo)
knitr::kable(typeClassTwo)
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("Fail", "Pass", "A+"),
ordered = TRUE)
max_Score = max(grade, na.rm = TRUE)
paste(bootcampDataFrame$courseName[grade = max_Score], ":", bootcampDataFrame$anticipatedGrade[grade = max_Score])
max_Score
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("B+", "A", "A+"),
ordered = TRUE)
max_Score = max(grade, na.rm = TRUE)
paste(bootcampDataFrame$courseName[grade = max_Score], ":", bootcampDataFrame$anticipatedGrade[grade = max_Score])
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("B+", "A", "A+"),
ordered = TRUE)
max_Score = max(grade, na.rm = TRUE)
paste(bootcampDataFrame$num[grade == max_Score], bootcampDataFrame$anticipatedGrade[grade == max_Score])
bootcampDataFrame = data.frame(courseNum, courseName, courseProf,
enrolled, anticipatedGrade, anticipatedHours)
typesTwo <- sapply(bootcampDataFrame, typeof)
classesTwo <- sapply(bootcampDataFrame, class)
typeClassTwo = data.frame(Type = typesTwo, Class = classesTwo)
knitr::kable(typeClassTwo)
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("B+", "A", "A+"),
ordered = TRUE)
max_Score = max(grade, na.rm = TRUE)
max
paste(bootcampDataFrame$num[grade == max_Score], bootcampDataFrame$anticipatedGrade[grade == max_Score], sep = ": ")
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("B+", "A", "A+"),
ordered = TRUE)
maxScore = max(grade, na.rm = TRUE)
maxScore
paste(bootcampDataFrame$num[grade == max_Score], bootcampDataFrame$anticipatedGrade[grade == max_Score], sep = ": ")
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("B+", "A", "A+"),
ordered = TRUE)
maxScore = max(grade, na.rm = TRUE)
maxScore
paste(bootcampDataFrame$courseName[grade == max_Score], bootcampDataFrame$anticipatedGrade[grade == max_Score], sep = ": ")
grade <- factor(bootcampDataFrame$anticipatedGrade,
levels = c("B+", "A", "A+"),
ordered = TRUE)
maxScore = max(grade, na.rm = TRUE)
maxScore
paste(bootcampDataFrame$courseName[grade == max_Score & !is.na(grade)], bootcampDataFrame$anticipatedGrade[grade == max_Score & !is.na(grade)], sep = ": ")
titanicData = read.csv("titanic.csv")
pwd
pwd()
pd()
getwd()
titanicData = read.csv("titanic.csv")
titanicData = read.csv("titanic.csv")
titanicData = read.csv("titanic.csv", rt)
titanicData = read.csv("titanic.csv", rt)
titanicData = read.csv("titanic.csv")
getwd()
setwd(~/MSAN)
setwd(~MSAN)
setwd(MSAN)
setwd(/MSAN)
setwd("/MSAN/msan593/week1")
setwd("~/MSAN/msan593/week1")
setwd("~Dropbox/MSAN/msan593/week1")
setwd("/Dropbox/MSAN/msan593/week1")
setwd("~/Dropbox/MSAN/msan593/week1")
ls()
getwd()
setwd("/Users/jinxin/Dropbox/MSAN/msan593/week1")
par(mfrow=c(2,1))
plot(BJsales)
#Instead we'll use the twice-differenced version of this time series. More discussion of the
#idea behind this differencing to come.
BJ2 <- diff(diff(BJsales))
plot(BJ2)
acf(BJ2)
pacf(BJ2)
fit.ar <- arima(BJ2, order=c(3,0,0)) #AR(3)
fit.ar # estimate the mean (whether include.mean is set or not doesn't change the
# ARMA parameters)
fit.ma <- arima(BJ2, order=c(0,0,1)) #MA(1)
fit.ma
fit.arma <- arima(BJ2, order=c(3,0,1)) #ARMA(3,1)
fit.arma
fitls.ar <- arima(BJ2, order=c(3,0,0), method="CSS") #AR(3)
fitls.ar
fitls.ma <- arima(BJ2, order=c(0,0,1), method="CSS") #MA(1)
fitls.ma
fitls.arma <- arima(BJ2, order=c(3,0,1), method="CSS") #ARMA(3,1)
fitls.arma
m1<-arima(BJ2,order=c(1,0,0))
m2<-arima(BJ2,order=c(2,0,0))
m3<-arima(BJ2,order=c(3,0,0))
m4<-arima(BJ2,order=c(4,0,0))
m5<-arima(BJ2,order=c(0,0,1))
m6<-arima(BJ2,order=c(0,0,2))
m7<-arima(BJ2,order=c(1,0,1))
m8<-arima(BJ2,order=c(2,0,1))
m9<-arima(BJ2,order=c(3,0,1))
m10<-arima(BJ2,order=c(4,0,1))
m11<-arima(BJ2,order=c(1,0,2))
m12<-arima(BJ2,order=c(2,0,2))
m13<-arima(BJ2,order=c(3,0,2))
m14<-arima(BJ2,order=c(4,0,2))
sigma2<-c(m1$sigma2,m2$sigma2,m3$sigma2,m4$sigma2,m5$sigma2,m6$sigma2,m7$sigma2,m8$sigma2,m9$sigma2,m10$sigma2,m11$sigma2,m12$sigma2,m13$sigma2,m14$sigma2)
loglik<-c(m1$loglik,m2$loglik,m3$loglik,m4$loglik,m5$loglik,m6$loglik,m7$loglik,m8$loglik,m9$loglik,m10$loglik,m11$loglik,m12$loglik,m13$loglik,m14$loglik)
AIC<-c(m1$aic,m2$aic,m3$aic,m4$aic,m5$aic,m6$aic,m7$aic,m8$aic,m9$aic,m10$aic,m11$aic,m12$aic,m13$aic,m14$aic)
d <- data.frame(pq = c("(1,0)","(2,0)","(3,0)","(4,0)","(0,1)","(0,2)","(1,1)","(2,1)","(3,1)","(4,1)","(1,2)","(2,2)","(3,2)","(4,2)"),sigma2,loglik,AIC)
d
# Order this by sigma2
d[order(d$sigma2),]
# Order this by loglik
d[order(-d$loglik),]
d[order(d$AIC),]
par(mfrow=c(2,1))
plot(BJsales)
acf(BJsales)
adf.test(BJsales)
install.packages("tseries")
library("tseries")
par(mfrow=c(2,1))
plot(BJsales)
acf(BJsales)
adf.test(BJsales)
BJ1 <- diff(BJsales)
plot(BJ1, ylab = "BJ1")
acf(BJ1)
adf.test(BJ1)
BJ2 <- diff(BJ1)
plot(BJ2, ylab = "BJ2")
acf(BJ2)
adf.test(BJ2)
acf(BJ1)
# Use the BJsales data
par(mfrow=c(2,1))
plot(BJsales)
acf(BJsales)
adf.test(BJsales)
# The raw time series is clearly not stationary. Try differencing once:
BJ1 <- diff(BJsales)
plot(BJ1, ylab = "BJ1")
acf(BJ1)
adf.test(BJ1)
# The once-differenced series is still not quite stationary. Try differencing again:
BJ2 <- diff(BJ1)
plot(BJ2, ylab = "BJ2")
acf(BJ2)
adf.test(BJ2)
m1 <- arima(BJ2, order = c(1,0,2))
m2 <- arima(BJsales, order = c(1,2,2))
ndiffs(x = BJsales, test = "adf", max.d = 10)
install.packages("forecast")
library(forecast)
auto.arima(BJsales, allowdrift = F)
# Compare this "optimal" model with m2, what we thought was optimal
m2
# Investigate this discrepancy
m3 <- arima(BJsales, order = c(1,1,1))
# Comapre these with likelihood ratio test
D <- -2*(m3$loglik - m2$loglik)
pval <- 1-pchisq(D,1)
print(c("Test Statistic:",round(D,4),"P-value:",round(pval,4)))
install.packages("lawstat")
library(lawstat)
ndiffs(x = BJsales, test = "adf", max.d = 10)
auto.arima(BJsales, allowdrift = F)
m3 <- arima(BJsales, order = c(1,1,1))
# Comapre these with likelihood ratio test
D <- -2*(m3$loglik - m2$loglik)
pval <- 1-pchisq(D,1)
print(c("Test Statistic:",round(D,4),"P-value:",round(pval,4)))
m <- arima(BJ2, order = c(1,0,2))
e <- m$residuals # residuals
r <- e/sqrt(m$sigma2) # standardized residuals
m$sigma2
par(mfrow=c(2,1))
plot(e, main="Residuals vs t", ylab="")
abline(h=0, col="red")
plot(r, main="Standardized Residuals vs t", ylab="")
abline(h=0, col="red")
par(mfrow=c(1,1))
plot(e, main="Residuals vs t", ylab="")
abline(v=c(37,74,111), lwd=3, col="red")
group <- c(rep(1,37),rep(2,37),rep(3,37),rep(4,37))
abline(v=c(30,60,90,120,150), lwd=3, col="red")
group <- c(rep(1,30),rep(2,30),rep(3,30),rep(4,30),rep(5,28))
levene.test(e,group) #Levene
bartlett.test(e,group) #Bartlett
t.test(e)
tsdiag(m)
par(mfrow=c(1,1))
qqnorm(e, main="QQ-plot of Residuals")
qqline(e, col = "red")
shapiro.test(e) #SW test
n <- 1000
sim <- 1000
total_win_switch <- c()
for (j in 1:sim)
{
win <- 0
for (i in 1:n)
{
items <- c("goat1", "goat2", "car")
doors <- sample(items, 3)
choice <- sample(doors, 1)
choice_index <- which(doors == choice)
indices <- c(1, 2, 3)
remaining_door_num <- indices[indices != choice_index]
remaining_doors <- doors[remaining_door_num]
host_choice <- sample(remaining_doors, 1)
if (host_choice == "goat1" | host_choice == "goat2")
{
final_choice <- remaining_doors[remaining_doors != host_choice]
}
else
{
final_choice <- remaining_doors[remaining_doors == host_choice]
}
if (final_choice == "car")
{
win <- win + 1
}
}
total_win_switch <- c(total_win_switch, win)
}
n <- 1000
sim <- 1000
total_win_nonswitch <- c()
for (j in 1:sim)
{
win <- 0
for (i in 1:n)
{
items <- c("goat1", "goat2", "car")
doors <- sample(items, 3)
choice <- sample(doors, 1)
if (choice == "car")
{
win <- win + 1
}
}
total_win_nonswitch <- c(total_win_nonswitch, win)
}
hist(total_win_switch, col=rgb(0,0,1,1/4), breaks=50)
hist(total_win_nonswitch, col=rgb(1,0,1,1/4), breaks=50)
n <- 1000
sim <- 5000
total_win_switch <- c()
for (j in 1:sim)
{
win <- 0
for (i in 1:n)
{
items <- c("goat1", "goat2", "car")
doors <- sample(items, 3)
choice <- sample(doors, 1)
choice_index <- which(doors == choice)
indices <- c(1, 2, 3)
remaining_door_num <- indices[indices != choice_index]
remaining_doors <- doors[remaining_door_num]
host_choice <- sample(remaining_doors, 1)
if (host_choice == "goat1" | host_choice == "goat2")
{
final_choice <- remaining_doors[remaining_doors != host_choice]
}
else
{
final_choice <- remaining_doors[remaining_doors == host_choice]
}
if (final_choice == "car")
{
win <- win + 1
}
}
total_win_switch <- c(total_win_switch, win)
}
n <- 1000
sim <- 5000
total_win_nonswitch <- c()
for (j in 1:sim)
{
win <- 0
for (i in 1:n)
{
items <- c("goat1", "goat2", "car")
doors <- sample(items, 3)
choice <- sample(doors, 1)
if (choice == "car")
{
win <- win + 1
}
}
total_win_nonswitch <- c(total_win_nonswitch, win)
}
hist(total_win_switch/1000, col=rgb(0,0,1,1/4), breaks=50,
title="Histogram: # of wins if switching doors")
hist(total_win_nonswitch/1000, col=rgb(1,0,1,1/4), breaks=50,
title="Histogram: # of wins if no switching doors")
hist(total_win_switch/1000, col=rgb(0,0,1,1/4), breaks=50,
main="Histogram: # of wins if switching doors")
hist(total_win_nonswitch/1000, col=rgb(1,0,1,1/4), breaks=50,
main="Histogram: # of wins if no switching doors")
hist(total_win_switch/1000, col=rgb(0,0,1,1/4), breaks=50,
main="Histogram: winning probability if switching doors")
hist(total_win_nonswitch/1000, col=rgb(1,0,1,1/4), breaks=50,
main="Histogram: winning probability without switching doors")
hist(total_win_switch/1000, col=rgb(0,0,1,1/4), breaks=50, xlab='probability',
main="Histogram: winning probability if switching doors")
hist(total_win_nonswitch/1000, col=rgb(1,0,1,1/4), breaks=50, xlab='probability',
main="Histogram: winning probability without switching doors")
hist(total_win_switch/1000, col=rgb(0,0,1,1/4), breaks=50, xlab='probability',
main="Histogram: winning probability if switching doors")
hist(total_win_nonswitch/1000, col=rgb(1,0,1,1/4), breaks=50, xlab='probability',
add=T, main="Histogram: winning probability without switching doors")
hist(total_win_switch/1000, col=rgb(0,0,1,1/4), breaks=50, xlab='probability',
main="Histogram: winning probability if switching doors")
hist(total_win_nonswitch/1000, col=rgb(1,0,1,1/4), breaks=50, xlab='probability',
main="Histogram: winning probability without switching doors")
sim <- 100000
bday <- seq(1, 365)
count <- 0
for (i in 1:sim)
{
classmate_bday <- sample(bday, 30, replace = TRUE)
if (length(unique(classmate_bday)) < length(classmate_bday))
{
count <- count + 1
}
}
print(count/sim)
sim <- 10000
num_students <- 40
bday <- seq(1, 365)
prob_list <- c()
for (k in 1: num_students)
{
count <- 0
for (i in 1:sim)
{
classmate_bday <- sample(bday, k, replace = TRUE)
if (length(unique(classmate_bday)) < length(classmate_bday))
{
count <- count + 1
}
}
prob_list <- c(prob_list, count/sim)
}
print(prob_list)
print(min(which(prob_list >= 0.5)))
sim <- 10000
num_students <- 40
bday <- seq(1, 365)
prob_list <- c()
for (k in 1: num_students)
{
count <- 0
for (i in 1:sim)
{
classmate_bday <- sample(bday, k, replace = TRUE)
if (length(unique(classmate_bday)) < length(classmate_bday))
{
count <- count + 1
}
}
prob_list <- c(prob_list, count/sim)
}
print(min(which(prob_list >= 0.5)))
sim <- 10000
bday <- seq(1, 365)
count <- 0
for (i in 1:sim)
{
classmate_bday <- sample(bday, 30, replace = TRUE)
if (length(unique(classmate_bday)) < length(classmate_bday))
{
count <- count + 1
}
}
print(count/sim)
shiny::runGitHub("usfviz/aaysu-viz")
shiny::runGitHub("lgbarrett-hw2", "usfviz")
shiny::runGitHub("usfviz/aaysu-viz")
shiny::runGitHub("usfviz", "aaysu-viz")
shiny::runGitHub("usfviz", "aaysu-viz")
# To install d3treeR
#devtools::install_github("gluc/data.tree")
#devtools::install_github("timelyportfolio/d3treeR")
# http://www.buildingwidgets.com/blog/2015/7/22/week-29-d3treer-v2
library(treemap)
library(d3treeR)
data(GNI2014)
tm <- treemap(GNI2014,
index=c("continent", "country"),
vSize="population",
vColor="GNI",
type="value",
format.legend = list(scientific = FALSE, big.mark = " "))
d3tree2(tm, rootname = "World" )
# Lab assignment
install.packages("ggplot2movies")
library(ggplot2movies)
data(movies)
head(movies)
m <- na.omit(movies)
# Design an interactive treemap visualization for the movies dataset
# ?treemap to customize various features such as color
# Can you change the default tooltip?
library("treemap")
tm <- treemap(m, index = c("mpaa", "year"), vSize = "votes",
vColor = "votes", type = "value",
format.legend = list(scientific = FALSE, big.mark = " "))
d3tree2(tm, rootname = "Movie")
shiny::runApp('Dropbox/MSAN/module4/msan622/class-code/treemap')
runApp('Dropbox/MSAN/module4/msan622/class-code/treemap')
shiny::runApp('Dropbox/MSAN/module4/msan622/class-code/lab5')
install.packages("shinythemes")
runApp('Dropbox/MSAN/module4/msan622/class-code/lab5')
runApp('Dropbox/MSAN/module4/msan622/class-code/lab5')
runApp('Dropbox/MSAN/module4/msan622/class-code/lab5')
runApp('Dropbox/MSAN/module4/msan622/class-code/lab5')
shiny::runGitHub("lgbarrett-hw3", "usfviz")
shiny::runGitHub("kelsey-macmillan-hw3", "usfviz", subdir = "hw3-app")
shiny::runApp('Dropbox/MSAN/module4/msan622/world_data_vis/src')
install.packages("gganimate")
devtools::install_github("dgrtwo/gganimate")
runApp('Dropbox/MSAN/module4/msan622/world_data_vis/src')
runApp('Dropbox/MSAN/module4/msan622/world_data_vis/src')
runApp('Dropbox/MSAN/module4/msan622/world_data_vis/src')
gg_animate(p, interval = .1, title_frame = FALSE)
library(gganimate)
gg_animate(p, interval = .1, title_frame = FALSE)
shiny::runApp('Dropbox/MSAN/module4/msan622/world_data_vis/src')
runApp('Dropbox/MSAN/module4/msan622/world_data_vis/src')
runApp('Dropbox/MSAN/module4/msan622/world_data_vis/src')
runApp('Dropbox/MSAN/module4/msan622/world_data_vis/src')
runApp('Dropbox/MSAN/module4/msan622/world_data_vis/src')
shiny::runApp('Dropbox/MSAN/module4/msan622/world_data_vis/src')
shiny::runApp('Dropbox/MSAN/module4/msan622/world_data_vis/src')
